#!/bin/bash

show_usage()
{
	[ -n "$1" ] && printf -v indent "%-${1}s";
	firstl="$indent"
	[ -n "$2" ] && printf -v firstl "%-${1}s" "$2";
	cat <<ENDUSAGE
${firstl}vm-list [-sh]
ENDUSAGE
}

err_usage()
{
	show_usage 8 "usage:" >&2
	exit 1
}

show_help()
{
	show_usage
	cat <<ENDHELP

Lists available virtual machine profiles and their status

Options:
  -h
      Show this help.

  -s
      Execute in 'script mode'; output is formatted in a way that makes it easy
      to process the output with scripts.
ENDHELP
	exit 0
}

parse_args()
{
	export OPTIND=1 # reset and export so subshells see it
	while [ $# -ge 1 ]
	do
		while getopts ":sh" opt
		do
			case $opt in
				s)
					opt_script=1;;
				h)
					show_help;;
				\?|:)
					err_usage;;
			esac
		done
		shift $(expr $OPTIND \- 1)
		cmdargs=("${cmdargs[@]}" $1)
		shift 1
		OPTIND=1
	done
}

default()
{
	while read line
	do
		if [ -z "$line" ]
		then
			echo "$1"
		else
			echo "$line"
		fi
	done
}

output_info_script()
{
	. "$_dir_profiles/.default"
	. "$_dir_profiles/${1}.conf"

	vm_instances=$(vm status -s $1 | wc -l)
	case "$vm_autostart" in
		1|On|on|Yes|yes|True|true)
			vm_autostart="1"
			;;
		*)
			vm_autostart="0"
			;;
	esac

	echo "$1:$vm_name:$vm_instances:$vm_autostart:$vm_image:$vm_machine:$vm_host:$vm_cpu:$vm_memory:$vm_graphics:$vm_networking"
}

output_info()
{
	. "$_dir_profiles/.default"
	. "$_dir_profiles/${1}.conf"

	indent="        "
	
	prof_name=$(echo "$vm_name" | default "(no name set)")
	prof_machine=$(echo "$vm_machine" | default "(not set)")
	prof_cpu=$(echo "$vm_cpu" | default "(not set)")
	prof_memory=$(echo "$vm_memory" | default "(not set)")
	prof_graphics=$(echo "$vm_graphics" | default "(not set)")
	prof_networking=$(echo "$vm_networking" | default "(not set)")
	prof_instances=$(vm status -s $1 | wc -l)
	prof_max_instances=$(echo "$vm_max_instances" | default "Unlimited")

	case "$vm_autostart" in
		1|On|on|Yes|yes|True|true)
			prof_autostart="True"
			;;
		*)
			prof_autostart="False"
			;;
	esac

	echo "$prof_name - Profile Name: $1"
	[ -n "$vm_description" ] && echo "${indent}$vm_description"
	echo "${indent}-----------------"
	echo "${indent}Instances Running: $prof_instances"
	echo "${indent}Maxmimum Instances: $prof_max_instances"
	echo "${indent}Autostart at System Boot: $prof_autostart"
	echo "${indent}-----------------"
	if [ -z "$vm_image_1" -a -z "$vm_image_2" -a -z "$vm_image_3" -a -z "$vm_cd" ]
	then
		echo "${indent}No block devices attached"
	else
		if [ -n "$vm_image_1" ]
		then
			opt="$(echo "$vm_image_1" | cut -s -d ',' -f 2-)"
			[ -n "$opt" ] && opt=" (options: $opt)"
			echo "${indent}Disk Image: $vm_image1$opt"
		fi
		if [ -n "$vm_image_2" ]
		then
			opt="$(echo "$vm_image_2" | cut -s -d ',' -f 2-)"
			[ -n "$opt" ] && opt=" (options: $opt)"
			echo "${indent}Disk Image: $vm_image2$opt"
		fi
		if [ -n "$vm_image_3" ]
		then
			opt="$(echo "$vm_image_3" | cut -s -d ',' -f 2-)"
			[ -n "$opt" ] && opt=" (options: $opt)"
			echo "${indent}Disk Image: $vm_image3$opt"
		fi
		if [ -n "$vm_cd" ]
		then
			opt="$(echo "$vm_cd" | cut -s -d ',' -f 2-)"
			[ -n "$opt" ] && opt=" (options: $opt)"
			echo "${indent}Attached CD: $vm_cd$opt"
		fi
	fi
	echo "${indent}-----------------"
	echo "${indent}Machine Options: $prof_machine"
	echo "${indent}Host Type: $prof_host"
	echo "${indent}CPU: $prof_cpu"
	echo "${indent}Memory: $prof_memory"
	echo "${indent}Graphics: $prof_graphics"
	echo "${indent}Networking: $prof_networking"
	echo
}

if [ -z ${EMUFOX_HOME+x} ]
then
	export EMUFOX_HOME=$(realpath "$(dirname "$(realpath "$0")")/..")
fi

. $EMUFOX_HOME/emufox.conf

opt_script=

parse_args "$@"

for profile in "$_dir_profiles"/*
do
	base_prof=$(basename "$profile")
	if [ -n "$opt_script" ]
	then
		output_info_script "${base_prof%.*}"
	else
		output_info "${base_prof%.*}"
	fi
done

