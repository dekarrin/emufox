#!/bin/bash

show_usage()
{
	[ -n "$1" ] && printf -v indent "%-${1}s";
	firstl="$indent"
	[ -n "$2" ] && printf -v firstl "%-${1}s" "$2";
	cat <<ENDUSAGE
${firstl}vm-status [-o OUTPUT [-o OUTPUT]...] [-i OBS_FILE] [-ahs] PROFILE
${indent}vm-status [-o OUTPUT [-o OUTPUT]...] [-i OBS_FILE] [-ahs] -l
ENDUSAGE
}

err_usage()
{
	show_usage 8 "usage:" >&2
	exit 1
}

show_help()
{
	show_usage
	cat <<ENDHELP

Checks the status of the virtual machines

Arguments:
  PROFILE
      The name of the profile to check the status of. The status for each
      instace of that profile is displayed. If no instances of that profile are
      running, no output is displayed.

Options:
  -a
      Show extended information on each VM instance. Under normal execution,
      some information is not displayed. -a is equivalent to passing a -o option
      for every possible output type. If any -o options are passed along with
      -a, that output option will be duplicated.

  -h
      Show this help.

  -i OBS_FILE
      Ignore any VM instances that have names that are contained in the
      specified obsolete-infofile list file. Normally, vm-status uses the lists
      in the .obsolete directory of the EmuFox system. -i overrides this such
      that OBS_FILE is used instead.

  -l
      List the status for all VM instances running instead of a particular
      profile's instances.

  -o OUTPUT
      Display only the specified type of output. Multiple -o options may be
      specified. The following types of output are accepted as parameters to -o:
        bridge -
          The name of the bridge interface the VM is using (if any; will be '-'
          if the VM does not use bridged networking and vm-status is run in
          'script mode' with -s).
        display -
          The display that the VM is using (if any; will be '-' if the VM is
          running in headless mode and vm-status is run in 'script mode' with
         -s).
        pid -
          The process ID of the VM's monitor console.
        profile -
          The name of the profile of the VM.
        screen -
          The name of the screen session to which the VM's monitor console is
          attached.
        infofile -
          The name of the file that contains information on the running VM. This
          file will be located in the .vminfo directory of the EmuFox system.

  -s
      Execute in 'script mode'; output is formatted in a way that makes it easy
      to process the output with scripts.
ENDHELP
	exit 0
}

parse_args()
{
	export OPTIND=1 # reset and export so subshells see it
	while [ $# -ge 1 ]
	do
		while getopts ":ashi:lo:" opt
		do
			case $opt in
				a)
					opt_output_default=
					output_queue=("${output_queue[@]}" pid profile screen display bridge infofile)
					;;
				l)
					opt_list=1;;
				s)
					opt_script=1;;
				o)
					if [ "$OPTARG" = bridge -o \
					     "$OPTARG" = display -o \
					     "$OPTARG" = profile -o \
					     "$OPTARG" = pid -o \
					     "$OPTARG" = screen -o \
					     "$OPTARG" = infofile ]
					then
						opt_output_default=
						output_queue=("${output_queue[@]}" "$OPTARG")
					else
						echo "error: bad output option '$OPTARG'" >&2
						exit 1
					fi
					;;
				h)
					show_help;;
				i)
					opt_obs_file="$OPTARG";;
				\?|:)
					err_usage;;
			esac
		done
		shift $(expr $OPTIND \- 1)
		cmdargs=("${cmdargs[@]}" $1)
		shift 1
		OPTIND=1
	done
	[ ${#cmdargs[@]} -lt 1 -a -z "$opt_list" ] && err_usage
	arg_profile="${cmdargs[0]}"
}

default()
{
	while read line
	do
		if [ -z "$line" ]
		then
			echo "$1"
		else
			echo "$line"
		fi
	done
}

load_info()
{
	defval="(none)"
	[ -n "$opt_script" ] && defval=-
	info="$(<"$1")"

	# note: these must have the same names as the accepted options
	# (and therefore the same names as the options on the output
	# queue)
	pid=$(echo "$info" | cut -d ':' -f 1)
	profile=$(echo "$info" | cut -d ':' -f 2)
	display=$(echo "$info" | cut -d ':' -f 3 | default $defval)
	bridge=$(echo "$info" | cut -d ':' -f 4 | default $defval)
	screen=$(echo "$info" | cut -d ':' -f 5)
	infofile="$(basename "$1")"
}

precalc_widths()
{
	# first do titles
	index=0
	for item in ${output_queue[@]}
	do 
		col_widths[$index]=${#titles[$item]}
		(( index++ ))
	done

	# now prescan the files
	for file in "$EMUFOX_HOME"/.vminfo/*
	do
		load_info "$file"
		[ "$profile" = "$arg_profile" -o -n "$opt_list" ] || continue
		! in_array "$infofile" "${obsolete_vms[@]}" || continue
		index=0
		for item in ${output_queue[@]}
		do
			val="${!item}"
			[ "${#val}" -gt "${col_widths[$index]}" ] && col_widths[$index]=${#val}
			(( index++ ))
		done
	done

	# add 2 for pretty spacing
	index=0
	while [ $index -lt ${#col_widths[@]} ]
	do
		col_widths[$index]=$(expr ${col_widths[$index]} + $col_spacing)
		(( index++ ))
	done
}

in_array()
{
	target="$1"
	shift
	for val in "$@"
	do
		[ "$target" = "$val" ] && return 0
	done
	return 1
}

if [ -z ${EMUFOX_HOME+x} ]
then
	export EMUFOX_HOME=$(realpath "$(dirname "$(realpath "$0")")/..")
fi

. $EMUFOX_HOME/emufox.conf

declare -A titles
titles[pid]=PID
titles[profile]="VM Profile"
titles[display]="VNC Display"
titles[bridge]="Bridge Interface"
titles[screen]="Screen Session"
titles[infofile]="Info File"

col_spacing=3

opt_list=
opt_script=
opt_obs_file=
opt_output_default=1
optput_queue=()
arg_profile=
obsolete_vms=()

parse_args "$@"

"$_dir_scripts"/vm-clean -a

# default output queue
[ "$opt_output_default" = 1 ] && output_queue=(pid profile screen display bridge)

[ -d "$EMUFOX_HOME/.vminfo" ] || exit 0
[ -n "$(ls "$EMUFOX_HOME/.vminfo")" ] || exit 0

# load the list of obsolete VM instances
list_files=()
if [ -n "$opt_obs_file" ]
then
	list_files=("$opt_obs_file")
elif [ -d "$EMUFOX_HOME"/.obsolete ]
then
	for f in "$EMUFOX_HOME"/.obsolete/*
	do
		[ "$f" = "$EMUFOX_HOME/.obsolete/*" ] && break
		list_files=("${list_files[@]}" "$f")
	done
fi
for obs_file in "${list_files[@]}"
do
	while read line
	do
		! in_array "$line" "${obsolete_vms[@]}" && obsolete_vms=("${obsolete_vms[@]}" "$line")
	done < "$obs_file"
done

# check to make sure there is at least one instance that matches the profile
# and that is not obsolete
instances_exist=
for file in "$EMUFOX_HOME"/.vminfo/*
do
	load_info "$file"
	[ "$profile" = "$arg_profile" -o -n "$opt_list" ] || continue
	if ! in_array "$infofile" "${obsolete_vms[@]}"
	then
		instances_exist=1
		break
	fi
done
[ -n "$instances_exist" ] || exit 0

# setup col_widths var
index=0
while [ $index -lt ${#output_queue[@]} ]
do
	col_widths[$index]=0
	(( index++ ))
done

if [ -z "$opt_script" ]
then
	precalc_widths

	# output titles:
	output=
	index=0
	for item in ${output_queue[@]}
	do
		output="$output$(printf "%-${col_widths[$index]}s" "${titles[$item]}")"
		(( index++ ))
	done
	echo "$output"
fi

# output actual data
for file in "$EMUFOX_HOME"/.vminfo/*
do
	load_info "$file"

	[ "$profile" = "$arg_profile" -o -n "$opt_list" ] || continue
	! in_array "$infofile" "${obsolete_vms[@]}" || continue
	
	output=
	index=0
	s=
	for item in "${output_queue[@]}"
	do
		output="$output$s$(printf "%-${col_widths[$index]}s" ${!item})"
		[ -n "$opt_script" ] && s=:
		(( index++ ))
	done
	echo "$output"
done


